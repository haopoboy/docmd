variables:
  # This will suppress any download for dependencies and plugins or upload messages which would clutter the console log.
  # `showDateTime` will show the passed time in milliseconds. You need to specify `--batch-mode` to make this work.
  MAVEN_OPTS: "-Dhttps.protocols=TLSv1.2 -Dmaven.repo.local=$CI_PROJECT_DIR/.m2/repository -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=WARN -Dorg.slf4j.simpleLogger.showDateTime=true -Djava.awt.headless=true"
  
  # As of Maven 3.3.0 instead of this you may define these options in `.mvn/maven.config` so the same config is used
  # when running from the command line.
  # `installAtEnd` and `deployAtEnd` are only effective with recent version of the corresponding plugins.
  MAVEN_CLI_OPTS: "--batch-mode --errors --fail-at-end --show-version -DinstallAtEnd=true -DdeployAtEnd=true"

cache:
  paths:
    - .m2/repository
    - target

.validate: &validate
  stage: build
  script:
    - ./mvnw -v
    - ./mvnw test-compile
    
.test: &test
  stage: test
  script:
    - ./mvnw -v
    - ./mvnw test

.npm: &npm
  stage: build
  before_script:
    - cd frontend
  script:
    - node -v
    - npm -v
    - npm install
    - npm run build

.verify: &verify
  stage: test
  script:
    - ./mvnw -v
    - ls -al frontend
    - ls -al target

# Validate using JDK8
validate:jdk8:
  <<: *validate
  image: maven:3.3.9-jdk-8-alpine

# Validate frontend using Node8
npm:node8:
  <<: *npm
  image: node:8-alpine
  artifacts:
    paths:
      - frontend/dist
    expire_in: 1 week

# Validate frontend using Node10 just for test
npm:node10:
  <<: *npm
  image: node:10-alpine

# Test using JDK8
test:jdk8:
  <<: *test
  image: maven:3.3.9-jdk-8-alpine

# Verify using JDK8 and pack it with frontend of node8
verify:jdk8:
  <<: *verify
  image: maven:3.3.9-jdk-8-alpine
  artifacts:
    paths:
      - target/package.log
    expire_in: 1 week
  dependencies:
    - npm:node8
